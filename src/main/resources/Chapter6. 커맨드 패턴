호출 캡슐화하기_커맨드 패턴

메소드 호출을 캡슐화하기

요청한 쪽과 작업을 처리하는 쪽을 분리할 수 있음.
특정 객체에 관한 작업 요청을 캡슐화
버튼마다 커맨드 객체를 저장해 두면 사용자가 버튼을 눌렀을 때 커맨드 객체로 작업을 처리할 수 있다.

인보커 로딩
1. 클라이언트에서 커맨드 객체 생성
2. setCommand()를 호출해서 인보커에 커맨드 객체를 저장
3. 나중에 클라이언트에서 인보커에게 그 명령을 실행하라고 요청

커맨드 패턴의 정의
요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화할 수 있습니다. 이러한 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있습니다.

NoCommand 객체

람다 표현식을 쓰면 구상 커맨드 객체의 인스턴스를 생성하는 대신 그 자리에 함수 객체를 사용할 수 있어서 구상 커맨드를 지울 수 있습니다.
구상 커맨드 객체를 람다 표현식으로 바꾸면 구상 커맨드 클래스를 모두 지워도 됩니다. 그러면 리모컨 애플리케이션에 들어있는 클래스를 22개에서 9개로 줄일 수 있습니다.
하지만 이 방법은 Command 인터페이스에 추상 메소드가 하나뿐일 때만 사용할 수 있습니다. 추상 메소드를 하나만 더 추가해도 이 방법은 쓸 수 없습니다.\